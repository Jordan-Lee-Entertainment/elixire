HOST = 'localhost'
PORT = 8082

# Link / to ./frontend ?
ENABLE_FRONTEND = True

db = {
    'host': 'localhost',
    'user': 'postgres',
    'password': '',
}

# 72 hours, 3 days.
TIMED_TOKEN_AGE = 259200

# run clamdscan on every upload.
# this will use the multicore option,
# so it is not recommended on low-end machines.
UPLOAD_SCAN = False

# When UPLOAD_SCAN is true and
# a file is detected as being malicious,
# we will call this discord webhook
# with data about the upload.
UPLOAD_SCAN_WEBHOOK = ""

# Should we clear EXIF values for JPEGs?
# Needs Pillow
CLEAR_EXIF = False

ACCEPTED_MIMES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/svg+xml',
    'audio/webm',
    'video/webm'
]
RATELIMIT = {
    'requests': 99999,
    'second':   99999,
}
RL_THRESHOLD = 9999

redis = 'redis://localhost'

THUMBNAIL_SIZES = {
    # large
    'l': (5000, 5000),

    # medium
    'm': (1000, 1000),

    # small
    's': (500, 500),

    # tiny
    't': (250, 250),
}

THUMBNAILS = False
THUMBNAIL_FOLDER = './thumbnails'

IP_RATELIMIT = {
    'requests': 99999,
    'second':   99999,
}

IMAGE_FOLDER = "./images"
SPECIAL_RATELIMITS = {}

UPLOADS_ENABLED = True
SHORTENS_ENABLED = True
REGISTRATIONS_ENABLED = True
PATCH_API_PROFILE_ENABLED = True

MAILGUN_DOMAIN = ''
MAILGUN_API_KEY = ''

INSTANCE_NAME = 'elixi.re'
MAIN_URL = 'https://localhost:8081'
USE_HTTPS = False
SUPPORT_EMAIL = 'support@elixi.re'

DUMP_ENABLED = True
DUMP_FOLDER = './dumps'

# Enable metrics?
# uses InfluxDB and aioinflux to send data.
ENABLE_METRICS = False
METRICS_DATABASE = 'elixire'

# InfluxDB Authentication, if any
INFLUXDB_AUTH = False
INFLUX_HOST = ('localhost', 8086)
INFLUX_SSL = False
INFLUX_USER = 'admin'
INFLUX_PASSWORD = '123'



# InfluxDB Authentication, if any
INFLUXDB_AUTH = False
INFLUX_HOST = ('localhost', 8086)
INFLUX_SSL = False
INFLUX_USER = 'admin'
INFLUX_PASSWORD = '123'

# ADVANCED:
# This defines the limits for the main metrics worker.
# Instead of sending a datapoint to InfluxDB every time
# there is one, we schedule a maximum of METRICS_LIMIT[0]
# datapoints to be sent every METRICS_LIMIT[1] seconds,
# in order.
METRICS_LIMIT = (100, 3)

# === RATELIMIT BANNING SETTINGS ===

# change this to your wanted ban period
# valid: '1 day', '6 hours', '10 seconds', etc.
BAN_PERIOD = '6 hours'
IP_BAN_PERIOD = '5 minutes'

# How many ratelimits can be triggered by
# a client before they get banned?
RL_THRESHOLD = 10

# === UPLOAD SETTINGS ===

# run clamdscan on every upload.
# this will use the multicore option,
# so it is not recommended on low-end machines.
UPLOAD_SCAN = False

# How many seconds to wait scanning before
# switching that scan to the background? (can be int or float)
#
# See issue #35 for more details.
SCAN_WAIT_THRESHOLD = 1

# Should we clear EXIF values for JPEGs?
# Needs Pillow (should be already installed by requirements.txt)
CLEAR_EXIF = False

# To prevent potential exploits to take over a lot of storage space
# by abusing EXIF cleaning, we're comparing size of images before and after
# EXIF cleaning. If exif_cleaned_filesize/regular_filesize is bigger than
# the following number, we just use non-exif cleaned versions of the files.
# Using anything below 1.25 or so might cause false positives.
# Set CLEAR_EXIF to False to disable cleaning
EXIF_INCREASELIMIT = 2

# Accepted MIME types for uploading.
# NOTE: MIME type checking is ignored for admins.
ACCEPTED_MIMES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/svg+xml',
    'audio/webm',
    'video/webm'
]


# Decrease factor for duplicated.
# If a user sends a file that another user has sent previously,
# then it won't count as much towards their limit.
#
# Setting this value to 1 will disable the feature.
# Setting this value to 0 will make dupes ignore the weekly limit
# Setting to any value between 0 and 1 will decrease
# the file's actual size by that factor
#
# Default is 0.5 as the upload still costs processing power and bandwidth
DUPE_DECREASE_FACTOR = 0.5


# === WEBHOOK SETTINGS ===
# All webhooks here are Discord Webhooks.

# When UPLOAD_SCAN is true and
# a file is detected as being malicious,
# we will call this discord webhook
# with data about the upload.
UPLOAD_SCAN_WEBHOOK = ""

# Webhook for banned users.
# Comment the line to disable those webhooks.
USER_BAN_WEBHOOK = ""
IP_BAN_WEBHOOK = ""

# Webhook for JPEGs that grew too much after EXIF cleaning.
EXIF_TOOBIG_WEBHOOK = ""

# Webhook for user registrations.
USER_REGISTER_WEBHOOK = ""

# === RATELIMIT SETTINGS ===
#
RATELIMITS = {
    # global ratelimit for authenticated connections
    '/': {
        'requests': 7,
        'second': 5
    },
    ('ip', '/'): {
        'filter': 'ip',
        'requests': 15,
        'second': 5
    },
    '/i/': {
        'filter': 'ip',
        'requests': 50,
        'second': 6
    },
    '/t/': {
        'filter': 'ip',
        'requests': 80,
        'second': 10,
    }
}

# === THUMBNAIL SETTINGS ===

# Enable thumbnails?
THUMBNAILS = True
THUMBNAIL_FOLDER = './thumbnails'

# Thumbnail sizing
THUMBNAIL_SIZES = {
    # large (5000x5000)
    'l': (5000, 5000),

    # medium (1000x1000)
    'm': (1000, 1000),

    # small (500x500)
    's': (500, 500),

    # tiny (250x250)
    't': (250, 250),
}

# Sets the minimum shortname length
SHORTNAME_LEN = 3

# Maximum length of the URL that's going to be shortened
MAX_SHORTEN_URL_LEN = 250

# === FEATURE SETTINGS ===
# Disabled features will raise a 503 to
# whoever requests the route

# Can be used for private instances to disable
# registrations, or for an instance with heavy load
# to disable it for debug.

UPLOADS_ENABLED = True
SHORTENS_ENABLED = True
REGISTRATIONS_ENABLED = True

# Enable users to change their own profile information?
PATCH_API_PROFILE_ENABLED = True

# Enable notifications for user activation?
NOTIFY_ACTIVATION_EMAILS = True

TOKEN_SECRET = "dick"
