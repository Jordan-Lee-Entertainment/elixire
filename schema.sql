-- Thank you FrostLuma for giving those functions
-- convert Discord snowflake to timestamp
CREATE OR REPLACE FUNCTION snowflake_time (snowflake BIGINT)
    RETURNS TIMESTAMP AS $$
BEGIN
    RETURN to_timestamp(((snowflake >> 22) + 1420070400000) / 1000);
END; $$
LANGUAGE PLPGSQL;


-- convert timestamp to Discord snowflake
CREATE OR REPLACE FUNCTION time_snowflake (date TIMESTAMP WITH TIME ZONE)
    RETURNS BIGINT AS $$
BEGIN
    RETURN CAST(EXTRACT(epoch FROM date) * 1000 - 1420070400000 AS BIGINT) << 22;
END; $$
LANGUAGE PLPGSQL;


CREATE TABLE IF NOT EXISTS domains (
    domain_id serial PRIMARY KEY,

    -- if domain can *only* be used by admins
    admin_only boolean DEFAULT false,
    
    official boolean DEFAULT false,

    -- cloudflare credentials
    cf_enabled boolean DEFAULT false,
    cf_email text,
    cf_zoneid text,
    cf_apikey text,

    domain text
);

INSERT INTO domains (domain_id, domain) VALUES (0, 'elixi.re');

CREATE TABLE IF NOT EXISTS users (
    -- generated snowflake for the user
    user_id bigint PRIMARY KEY,
    username text UNIQUE,

    -- instead of deleting an account right away, for law enforcement
    -- purposes, we can mark is as inactive.
    active boolean DEFAULT true,
    password_hash text,
    email text NOT NULL,
    consented BOOLEAN DEFAULT NULL,
    admin boolean DEFAULT false,
    paranoid boolean DEFAULT false,

    -- user domain information
    subdomain text DEFAULT '',
    domain bigint REFERENCES domains (domain_id) DEFAULT 0,

    shorten_subdomain text DEFAULT '',
    shorten_domain bigint REFERENCES domains (domain_id) DEFAULT NULL
);

-- user and IP bans, usually automatically managed by
-- our ratelimiting code, but can be extended.
CREATE TABLE IF NOT EXISTS bans (
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    reason text,
    end_timestamp timestamp without time zone
);

CREATE TABLE IF NOT EXISTS ip_bans (
    ip_address text NOT NULL,
    reason text NOT NULL,
    end_timestamp timestamp without time zone,

    -- so we know when the ban happened
    timestamp timestamp without time zone default now()
);

-- upload weekly limits for users
CREATE TABLE IF NOT EXISTS limits (
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    blimit bigint DEFAULT 104857600, /* byte limit for uploads, 100 mb by default */
    shlimit bigint DEFAULT 100, /* link shorten limit, 100 by default */
    PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS files (
    -- another snowflake
    file_id bigint PRIMARY KEY,

    -- so we know what to send instead of filename.split('.')[-1]
    mimetype text,

    -- generated by us, see api/common.py, gen_filename function
    filename text UNIQUE NOT NULL,

    file_size bigint,
    uploader bigint REFERENCES users (user_id) ON DELETE CASCADE,
    
    -- where is the file, inside our filesystem structure
    fspath text,

    -- same reasons as users can be inactive,
    -- files can be *marked* as deleted in the DB.
    deleted boolean DEFAULT false,

    -- files are per domain.
    domain bigint REFERENCES domains (domain_id) DEFAULT 0
);

-- shortened URLs
CREATE TABLE IF NOT EXISTS shortens (
    -- snowflake
    shorten_id bigint PRIMARY KEY,

    -- same as files, gen_filename is used
    filename text UNIQUE NOT NULL,

    -- link this shortened url will redirect to
    redirto text,

    uploader bigint REFERENCES users (user_id) ON DELETE CASCADE,
    deleted boolean DEFAULT false,
    domain bigint REFERENCES domains (domain_id) DEFAULT 0
);

-- email stuff for account deletion confirmations
CREATE TABLE IF NOT EXISTS email_deletion_tokens (
    hash text NOT NULL,
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    expiral timestamp without time zone default now() + interval '12 hours',
    PRIMARY KEY (hash, user_id)
);

-- email stuff for password reset requests
CREATE TABLE IF NOT EXISTS email_pwd_reset_tokens (
    hash text NOT NULL,
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    expiral timestamp without time zone default now() + interval '30 minutes',
    PRIMARY KEY (hash, user_id)
);

-- email stuff for data dumps
CREATE TABLE IF NOT EXISTS email_dump_tokens (
    hash text NOT NULL,
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    expiral timestamp without time zone default now() + interval '6 hours',
    PRIMARY KEY (hash, user_id)
);

-- data dump state
CREATE TABLE IF NOT EXISTS current_dump_state (
    -- identify the current dump
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,

    -- when did it properly start so we
    -- send an email to user saying how long did it take
    start_timestamp timestamp without time zone default now(),

    -- current state of the dump
    current_id bigint REFERENCES files (file_id) ON DELETE CASCADE,

    -- for percentages
    total_files bigint,
    files_done bigint,

    PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS dump_queue (
    user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
    request_timestamp timestamp without time zone default now(),
    PRIMARY KEY (user_id)
);
