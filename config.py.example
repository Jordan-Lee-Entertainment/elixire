HOST = 'localhost'
PORT = 8080

# basic configuration about the instance
INSTANCE_NAME = 'elixi.re'
MAIN_URL = 'https://elixi.re'
USE_HTTPS = True
SUPPORT_EMAIL = 'support@elixi.re'

# Mailgun API key for things like account deletion confirmation
MAILGUN_DOMAIN = ''
MAILGUN_API_KEY = ''

# Link / to ./frontend ?
ENABLE_FRONTEND = True

# Which folder to store uploaded images to?
IMAGE_FOLDER = './images'

# Folder to store data dumps.
DUMP_ENABLED = True
DUMP_FOLDER = './dumps'
DUMP_JANITOR_PERIOD = 600

db = {
    'host': 'localhost',
    'user': 'postgres',
    'password': '',
}

redis = 'redis://localhost'

# Enable metrics?
# uses InfluxDB and aioinflux to send data.
ENABLE_METRICS = True
METRICS_DATABASE = 'elixire'

# InfluxDB Authentication
INFLUXDB_AUTH = False
INFLUX_HOST = ('localhost', 8086)
INFLUX_SSL = False
INFLUX_USER = 'admin'
INFLUX_PASSWORD = '123'

# 72 hours, 3 days.
TIMED_TOKEN_AGE = 259200

# run clamdscan on every upload.
# this will use the multicore option,
# so it is not recommended on low-end machines.
UPLOAD_SCAN = False

# How many seconds to wait scanning before
# switching that scan to the background? (can be int or float)
#
# See #35 for more details.
SCAN_WAIT_THRESHOLD = 1

# When UPLOAD_SCAN is true and
# a file is detected as being malicious,
# we will call this discord webhook
# with data about the upload.
UPLOAD_SCAN_WEBHOOK = ""

# Webhook for banned users.
# Comment the line to disable the webhook.
USER_BAN_WEBHOOK = ""
IP_BAN_WEBHOOK = ""

# Webhook for JPEGs that grew too much after EXIF cleaning.
EXIF_TOOBIG_WEBHOOK = ""

# Webhook for user registrations.
USER_REGISTER_WEBHOOK = ""

# change this to your wanted ban period
# '1 day', '6 hours', '10 seconds', etc.
BAN_PERIOD = '6 hours'
IP_BAN_PERIOD = '5 minutes'

# How many ratelimit payloads can be sent
# before the current user gets banned?
RL_THRESHOLD = 10

# Should we clear EXIF values for JPEGs?
# Needs Pillow
CLEAR_EXIF = False

# To prevent potential exploits to take over a lot of storage space
# by abusing EXIF cleaning, we're comparing size of images before and after
# EXIF cleaning. If exif_cleaned_filesize/regular_filesize is bigger than
# the following number, we just use non-exif cleaned versions of the files.
# Using anything below 1.25 or so might cause false positives.
# Set to None or 0 to disable check.
EXIF_INCREASELIMIT = 2

ACCEPTED_MIMES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/svg+xml',
    'audio/webm',
    'video/webm'
]

# Ratelimit settings

RATELIMIT = {
    'requests': 5,
    'second': 3,
}

IP_RATELIMIT = {
    'requests': 10,
    'second': 5,
}

# Ratelimit settings for special routes.
#   The only supported special routes are /i/ and /t/.
#   Also, special ratelimits will be forced to use IP ratelimiting.
SPECIAL_RATELIMITS = {}

# An example of a SPECIAL_RATELIMITS:
#   SPECIAL_RATELIMITS = {
#       '/i/': {'requests': 100, 'second': 5},
#       '/t/': {'requests': 200, 'second': 3},
#   }

# Enable thumbnails?
THUMBNAILS = False
THUMBNAIL_FOLDER = './thumbnails'

# Thumbnail sizing
THUMBNAIL_SIZES = {
    # large
    'l': (5000, 5000),

    # medium
    'm': (1000, 1000),

    # small
    's': (500, 500),

    # tiny
    't': (250, 250),
}

# Here you can disable certain features, in case there's a big bug etc
UPLOADS_ENABLED = True
SHORTENS_ENABLED = True
REGISTRATIONS_ENABLED = True
PATCH_API_PROFILE_ENABLED = True
